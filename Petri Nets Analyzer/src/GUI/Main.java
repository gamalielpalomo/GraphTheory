/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import javax.swing.JFileChooser;
import GraphTools.*;
import Global.Globals;
import java.awt.image.BufferedImage;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

/**
 *
 * @author Tania Rodriguez
 */
public class Main extends javax.swing.JFrame {

    private PN petriNet;
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        button_loadFile = new javax.swing.JButton();
        button_run = new javax.swing.JButton();
        PNPanel = new java.awt.ScrollPane();
        CGPanel = new java.awt.ScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 204));

        button_loadFile.setText("Load file");
        button_loadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_loadFileActionPerformed(evt);
            }
        });

        button_run.setText("Run");
        button_run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_runActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(button_loadFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(button_run, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PNPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 807, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CGPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 807, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_loadFile)
                    .addComponent(button_run))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addComponent(PNPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CGPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_runActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_runActionPerformed
        petriNet = new PN( Globals.preMatrix, Globals.postMatrix, Globals.marking );
        System.out.println("Pre matrix:");
        Globals.printMatrix(petriNet.getPreMatrix());
        System.out.println("Post matrix:");
        Globals.printMatrix(petriNet.getPostMatrix());
        System.out.println("Incidence matrix:");
        Globals.printMatrix(petriNet.getIncidenceMatrix());
        System.out.println("Marking vector:");
        Globals.printVector(petriNet.getMarkingVector());
        
        System.out.println("Building cover graph");
        petriNet.buildCoverGraph();
        System.out.println("Building cover graph using Tarjan");
        petriNet.buildTarjanCoverGraph();
        System.out.println("Building petri net picture");
        Globals.makeGraph(petriNet.getPreMatrix(), petriNet.getPostMatrix());
        System.out.println("Building cover graph picture");
        Globals.makeCoverGraph(petriNet.getCoverGraph(), "CoverGraph");
        System.out.println("Building Tarjan cover graph picture");
        Globals.makeCoverGraph(petriNet.getTarjanCoverGraph(), "Tarjan Cover Graph");
        
        BufferedImage img;
        JLabel picLabel = null;
        try {
            img = ImageIO.read(new File("PetriNetwork.png"));
            picLabel = new JLabel(new ImageIcon(img));
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
            Logger.getLogger(Globals.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //new GraphFrame(nombreArchivo);
        PNPanel.removeAll();
        PNPanel.add(picLabel);
        //panel1.add(new GraphJPanel("PetriNetwork",panel1.getWidth(),panel1.getHeight()));
        PNPanel.repaint();
        
        try {
            img = ImageIO.read(new File("CoverGraph.png"));
            picLabel = new JLabel(new ImageIcon(img));
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
            Logger.getLogger(Globals.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //new GraphFrame(nombreArchivo);
        CGPanel.removeAll();
        CGPanel.add(picLabel);
        //panel1.add(new GraphJPanel("PetriNetwork",panel1.getWidth(),panel1.getHeight()));
        CGPanel.repaint();
        
    }//GEN-LAST:event_button_runActionPerformed

    private void button_loadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_loadFileActionPerformed
        
        JFileChooser fileChooser = new JFileChooser();
        File workingDirectory = new File(System.getProperty("user.dir"));
        fileChooser.setCurrentDirectory(workingDirectory);
        int returnVal = fileChooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION){
            
            File inputFile = fileChooser.getSelectedFile();
            System.out.println(inputFile.getAbsolutePath());
            
            try{
            
                Scanner scanner = new Scanner(inputFile);
                
                //Here we create the temporal structures for the processing of the input matrices
                String inputText = new String();
                String tmpInput[];
                String tmpPre[];
                String tmpPost[];
                List<String[]> tmpPre2 = new ArrayList<>();
                List<String[]> tmpPost2 = new ArrayList<>();
                
                while(scanner.hasNextLine()){
                    inputText += scanner.nextLine();
                }
                tmpInput = inputText.split("\\|");
                tmpPre = tmpInput[0].split(" ");
                tmpPost = tmpInput[1].split(" ");
                for (String element : tmpPre) {
                    tmpPre2.add(element.split(","));
                }
                for (String element : tmpPost) {
                    tmpPost2.add(element.split(","));
                }
                
                int[][] pre = new int[tmpPre.length][tmpPre2.get(0).length];
                int[][] post = new int[tmpPost.length][tmpPost2.get(0).length];
                
                for(int i=0;i<tmpPre.length;i++){
                    for(int j=0; j<tmpPre2.get(i).length;j++){
                        pre[i][j]= Integer.parseInt(tmpPre2.get(i)[j]);
                    }
                }
                for(int i=0;i<tmpPost.length;i++){
                    for(int j=0; j<tmpPost2.get(i).length;j++){
                        post[i][j]=Integer.parseInt(tmpPost2.get(i)[j]);
                    }
                }
                
                Globals.preMatrix = pre;
                Globals.postMatrix = post;
                
                //Now in the following lines we obtain the initial marking from a predefined file
                
                Path filePath = Paths.get(workingDirectory + "\\init");
                scanner = new Scanner(filePath);
                inputText = scanner.nextLine();
                tmpInput = inputText.split(",");
                Globals.marking = new int[Globals.postMatrix.length];
                for (int i=0; i<tmpInput.length; i++){
                    Globals.marking[i] = Integer.parseInt(tmpInput[i]);
                }
                
            }
            catch(IOException ioe){
            }
        }
    }//GEN-LAST:event_button_loadFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.ScrollPane CGPanel;
    private java.awt.ScrollPane PNPanel;
    private javax.swing.JButton button_loadFile;
    private javax.swing.JButton button_run;
    // End of variables declaration//GEN-END:variables
}
